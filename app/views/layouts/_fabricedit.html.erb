<%
=begin
	 
	 Locals: 
		- bulk_edit 
		
=end
%>

<%= render :partial => 'layouts/editblock', :locals => { :bulk_edit => bulk_edit } %>


<div class="span-6 last">
	<br><br><br><br><br><br><br>
	<div id="suggestion_box">
		<span class="fabric_label">Suggestions</span>
		
		<!-- Pattern Tags -->
		<ul id="fabric_display_pattern_tags" class="fabric_tags" style="display: none;">
			<% Tag.get_names("pattern").each do |t| %>
				<li <%= 'class=tag_selected' if !bulk_edit && @fabric.tags.include?(t) %> >
					<%= link_to t, "#" %>
				</li>
			<% end %>
		</ul>
		
		<!-- weave Tags -->
		<ul id="fabric_display_weave_tags" class="fabric_tags" style="display: none;">
			<% Tag.get_names("weave").each do |t|  %>
				<li <%= 'class=tag_selected' if !bulk_edit && @fabric.tags.include?(t) %> >
					<%= link_to t, "#" %>
				</li>
			<% end %>
		</ul>
		
		<!-- Season Tags -->
		<ul id="fabric_display_season_tags" class="fabric_tags" style="display: none;">
			<% Tag.get_names("season").each do |t|  %>
				<li <%= 'class=tag_selected' if !bulk_edit && @fabric.tags.include?(t) %> >
					<%= link_to t, "#" %>
				</li>
			<% end %>
		</ul>
		
		<!-- Contents Tags -->
		<ul id="fabric_display_contents_tags" class="fabric_tags" style="display: none;">
			<% Tag.get_names("contents").each do |t|  %>
				<li <%= 'class=tag_selected' if !bulk_edit && @fabric.tags.include?(t) %> >
					<%= link_to t, "#" %>
				</li>
			<% end %>
		</ul>
		
		<!-- Best For Tags -->
		<ul id="fabric_display_bestfor_tags" class="fabric_tags" style="display: none;">
			<% Tag.get_names("best_for").each do |t| %>
				<li <%= 'class=tag_selected' if !bulk_edit && @fabric.tags.include?(t) %> >
					<%= link_to t, "#" %>
				</li>
			<% end %>
		</ul>
		
		<!-- Other Tags -->
		<ul id="fabric_display_other_tags" class="fabric_tags" style="display: none;">
			<% Tag.get_names("other").each do |t|  %>
				<li <%= 'class=tag_selected' if !bulk_edit && @fabric.tags.include?(t) %> >
					<%= link_to t, "#" %>
				</li>
			<% end %>
		</ul>				
		
		<!-- Yarn Count -->	
		<ul id="count_display_tags" class="fabric_tags" style="display: none;">
			<% Fabric.get_distinct_yarncount.each do |y| %>
				<li <%= 'class=tag_selected' if !bulk_edit && @fabric.yarn_count.full_count == y %> >
					<%= link_to y, "#" %>
				</li>
			<% end %>
		</ul>

		<!-- Reed Pick -->	
		<ul id="reedpick_display_tags" class="fabric_tags" style="display: none;">
			<% Fabric.get_distinct_reedpick.each do |r| %>
				<li <%= 'class=tag_selected' if !bulk_edit && @fabric.reed_pick.full_reed_pick == r %> >
					<%= link_to r, "#" %>
				</li>
			<% end %>
		</ul>
		
		<!-- Width -->	
		<ul id="width_display_tags" class="fabric_tags" style="display: none;">
			<% Fabric.get_distinct_width.each do |w| %>
				<li <%= 'class=tag_selected' if !bulk_edit && (@fabric.width == w) %> >
					<%= link_to w, "#" %>
				</li>
			<% end %>
		</ul>
	</div>		
</div>


<%= javascript_include_tag 'autocomplete-rails.js' %>
<script type="text/javascript" charset="utf-8">

	function hide_all_tag_buttons() {
		$("UL.fabric_tags").css("display", "none");
	}

	function get_alltags(tag_type) {
		var tag_list_all_selector = "#"+tag_type+"_tag_list_all";
		var tag_list = $(tag_list_all_selector).attr("data-alltags");
		var tag_list_array = null;
		if (tag_list)
		{
			tag_list_array = tag_list.split(',');
			$.each(tag_list_array, function(index, value) {
				tag_list_array[index] = value.trim();
			});
		}
		return tag_list_array;	
	}
	
	// TODO: Move this to a helper file.
	function get_array_from_text(text_val) {
		var text_val_trimmed = $.trim(text_val);
		var text_array = text_val_trimmed.split(',');
		
		// Get rid of the white spaces and empty values
		$.each(text_array, function(index, value) {
			var idx_val = $.trim(value);
			if (idx_val.length == 0)
			{
				text_array.splice(index, 1);
			}
			else
			{
				text_array[index] = idx_val;
			}
		});
		return text_array;
	}
	
	// Case insensitive comparison to check 
	// if the array contains the value passed
	function ci_contains(val, arr) {
		if (val == null || arr == null) {
			return null;
		}
		var result = null;
		$.each(arr, function(index, value) {
			if (result == null && value.toLowerCase() == val.toLowerCase()) {
				result = value;
				return false;
			}	
		});
		return result;
	}
	
	function get_normalized_reed_pick(val) {
		if (val.length > 0) {
			if (!/^\s*[\d]+\s*\/\s*[\d]+\s*$/i.test(val)) {
				return null;
			}
			var val_array = val.split('/');
			return val_array[0].trim()+'/'+val_array[1].trim();
		}
		return null;
	}
	
	// Normalizes a given yarn count text value into
	// the format A/Bs x C/Ds
	// Returns null if the given value is invalid
	function get_normalized_yarn_count(val) {
		if (val.length > 0) {
	  		if (!/^[\d]*\/?[\d]+s*\s*x\s*[\d]*\/?[\d]+s*\s*$/i.test(val)) {
	  			return null;	
	  		}
			var val_array = val.toLowerCase().split('x');
			$.each(val_array, function(index, value) {
				count_val = value.trim();
				if (count_val.indexOf('/') > -1) {
					var count_val_array = count_val.split('/');
					$.each(count_val_array, function(index, value) {
						count_val_array[index] = value.trim();
					});
					count_val = count_val_array[0]+'/'+count_val_array[1];	
				}
				if (count_val.indexOf('s') == -1) {
					count_val = count_val+'s';
				}			
				val_array[index] = count_val;
			});		
			return val_array[0]+' x '+val_array[1];
		}
		else
		{
			return null;
		}
	}
	
	// Gets tag type from the ID name
	// Example 'fabric_pattern_tag_list' will return 'pattern'
	function get_tagtype_from_id(val) {
		// Extract tag type out of the name
		return val.split('_')[1];
	}
	
	// Move suggestion box next to the current element
	function move_suggestion_box(el_cdinates) {
		var sugg_cdinates = $('#suggestion_box').offset();
		$('#suggestion_box').offset({left: sugg_cdinates.left, top: el_cdinates.top - 50});
	}
	
	
	// Adds/Removes tag to the text field
	// Selects/Unselects tag from the tag buttons under suggestions.
	// flag - "add"
	//      - "remove" 
	function add_remove_tag_to_field(text_elem, tag_elem, tag_value, flag) {
		
		var tag_list = text_elem.val();
		var tag_list_array = get_array_from_text(tag_list);
		
		if (tag_elem) {
			if (tag_elem.hasClass('tag_selected') == false)
			{
				// If flag is explicitly set to remove, don't touch tag classes
				if (!flag || flag != "remove") {
					tag_elem.addClass("tag_selected");
					var result = ci_contains(tag_value, tag_list_array);
					if (result == null)
					{
						tag_list_array.push(tag_value);
					}
					else
					{
						// This should never happen. Do nothing.
					}
				}
			}
			else
			{
				// If flag is explicitly set to add, don't touch tag classes
				if (!flag || flag != "add") {
					tag_elem.removeClass("tag_selected");
					var result = ci_contains(tag_value, tag_list_array);
					if (result != null) {
						var value_index = $.inArray(result, tag_list_array);
						if (value_index > -1)
						{
							tag_list_array.splice(value_index, 1);
						}
						else
						{
							// This should never happen. Do nothing.
						}		
					}
				}
			}
		}
		else {
			if (flag == "add") {
				// Add
				var result = ci_contains(tag_value, tag_list_array);
				if (result == null)
				{
					tag_list_array.push(tag_value);
				}
			}
			else {
				// Remove
				var result = ci_contains(tag_value, tag_list_array);
				if (result != null)
				{
					var value_index = $.inArray(result, tag_list_array);
					if (value_index > -1)
					{
						tag_list_array.splice(value_index, 1);
					}
				}
			}
		}
		
		var tag_list_str = tag_list_array.join(", ");
		text_elem.val(tag_list_str);
		//alert(text_elem.val());
		return false;			
	}
	
	function setup_contents_table() {
		var text_elem = $('#fabric_contents_tag_list');
		var tag_list = text_elem.val();
		var tag_array = get_array_from_text(tag_list);
		if (tag_array != null) {
			$.each(tag_array, function(index, value) {
				var tag_elem = $("UL#fabric_display_contents_tags LI:contains('"+value+"')");
				add_remove_tag_to_field(text_elem, tag_elem, value, null);
				
				// Add it to the table
				$('TABLE#contents_entries').append("<tr><td>"+value+"</td><td><span id='contents_del_button' class='contents_button'></span></td></tr>");
			});
		}
		return false;
	}
	
	$(function() {
		
		/// Setting up Contents Tag items///
		setup_contents_table();

		/// Disable submit on enter keypress ///
		$(":text").keypress(function(event) {
			if (event.which == 13) {
				event.preventDefault();
			}
		});

		//// **************************** ////
		//// Unused Inputs jQuery Methods ////
		//// **************************** ////

		$("FORM INPUT, FORM SELECT, FORM TABLE").bind('focus', function() {
			hide_all_tag_buttons();			
			move_suggestion_box($(this).offset());
			return false;
		});

		//// ************************* ////
		//// Width jQuery Methods ////
		//// ************************* ////
		$('FORM INPUT#fabric_width').bind('focus', function() {
			hide_all_tag_buttons();			
			$("UL#width_display_tags").css("display", "block");
			return false;
		});
				
		
		$('FORM INPUT#fabric_width').bind('blur', function() {
			width_txt = $.trim($(this).val());
			$("UL#width_display_tags").children().removeClass("tag_selected")
			
			if (width_txt != null) {
				// Create an array of all width tags
				var width_array = new Array();
				$.each($("UL#width_display_tags LI").children(), function(index, value) {
					width_array.push(value.text);
				});
				
				var result = ci_contains(width_txt, width_array);
				if (result != null) {
					var tag_srch_str = ":contains('"+result+"')";
					var tag_found_in = $("UL#width_display_tags").children(tag_srch_str).addClass("tag_selected");
				}
				
				$(this).val(width_txt);
			}
			return false;
		});

		$('UL#width_display_tags LI').live("click", function() {
			var width_tag_value = $(this).children('A').first().text();
			if ( $(this).hasClass("tag_selected")) {
				$(this).removeClass("tag_selected");
				$('FORM INPUT#fabric_width').val("");
				$("UL#width_display_tags").children().removeClass("tag_selected");
			}
			else {
				$("UL#width_display_tags").children().removeClass("tag_selected");
				$(this).addClass("tag_selected");	
				$('FORM INPUT#fabric_width').val(width_tag_value);
			}
			return false;
		});
		
		//// ************************* ////
		//// Yarn-Count jQuery Methods ////
		//// ************************* ////
		$('FORM INPUT#fabric_f_yarn_count').bind('focus', function() {
			hide_all_tag_buttons();			
			$("UL#count_display_tags").css("display", "block");
			return false;
		});
				
		
		$('FORM INPUT#fabric_f_yarn_count').bind('blur', function() {
			yarn_count_txt = $.trim($(this).val());
			$("UL#count_display_tags").children().removeClass("tag_selected")

			yarn_count_txt  = get_normalized_yarn_count(yarn_count_txt);
			
			if (yarn_count_txt != null) {
				// Create an array of all count tags
				var count_tag_array = new Array();
				$.each($("UL#count_display_tags LI").children(), function(index, value) {
					count_tag_array.push(value.text);
				});
				
				var result = ci_contains(yarn_count_txt, count_tag_array);
				if (result != null) {
					var tag_srch_str = ":contains('"+result+"')";
					var tag_found_in = $("UL#count_display_tags").children(tag_srch_str).addClass("tag_selected");
				}
				
				$(this).val(yarn_count_txt);
			}
			return false;
		});

		$('UL#count_display_tags LI').live("click", function() {
			var count_tag_value = $(this).children('A').first().text();
			if ( $(this).hasClass("tag_selected")) {
				$(this).removeClass("tag_selected");
				$('FORM INPUT#fabric_f_yarn_count').val("");
				$("UL#count_display_tags").children().removeClass("tag_selected");
			}
			else {
				$("UL#count_display_tags").children().removeClass("tag_selected");
				$(this).addClass("tag_selected");	
				$('FORM INPUT#fabric_f_yarn_count').val(count_tag_value);
			}
			return false;
		});

		//// ************************* ////
		//// Reed-Pick jQuery Methods ////
		//// ************************* ////
		$('FORM INPUT#fabric_reed_pick_attributes_full_reed_pick').bind('focus', function() {
			hide_all_tag_buttons();			
			$("UL#reedpick_display_tags").css("display", "block");
			return false;
		});
				
		
		$('FORM INPUT#fabric_reed_pick_attributes_full_reed_pick').bind('blur', function() {
			reed_pick_txt = $.trim($(this).val());
			$("UL#reedpick_display_tags").children().removeClass("tag_selected")

			reed_pick_txt  = get_normalized_reed_pick(reed_pick_txt);
			
			if (reed_pick_txt != null) {
				// Create an array of all reed_pick tags
				var rp_tag_array = new Array();
				$.each($("UL#reedpick_display_tags LI").children(), function(index, value) {
					rp_tag_array.push(value.text);
				});
				
				var result = ci_contains(reed_pick_txt, rp_tag_array);
				if (result != null) {
					var tag_srch_str = ":contains('"+result+"')";
					var tag_found_in = $("UL#reedpick_display_tags").children(tag_srch_str).addClass("tag_selected");
				}
				
				$(this).val(reed_pick_txt);
			}
			return false;
		});

		$('UL#reedpick_display_tags LI').live("click", function() {
			var reedpick_tag_value = $(this).children('A').first().text();
			if ( $(this).hasClass("tag_selected")) {
				$(this).removeClass("tag_selected");
				$('FORM INPUT#fabric_reed_pick_attributes_full_reed_pick').val("");
				$("UL#reedpick_display_tags").children().removeClass("tag_selected");
			}
			else {
				$("UL#reedpick_display_tags").children().removeClass("tag_selected");
				$(this).addClass("tag_selected");	
				$('FORM INPUT#fabric_reed_pick_attributes_full_reed_pick').val(reedpick_tag_value);
			}
			return false;
		});

		
		//// ***************************** ////
		//// Fabric Tag - Contents Methods ////
		//// ***************************** ////
		
		$('table[id*=contents], span[id*=contents]').bind('click', function() {
	 		$(this).parent().children('select#contents_percentage').trigger('focus');
		});
		
		$('select[id*=contents]').bind('focus', function() {
			hide_all_tag_buttons();
			$('UL#fabric_display_contents_tags').css("display", "block");
			return false;
		});
		
		$('#contents_add_button').bind('click', function() {
			var perc = $('#contents_percentage').val();
			var mat = $('#contents_material').val();
			var contents_string = perc+" "+mat;
			
			// Add string to the table
			var found = $('TABLE#contents_entries').find("td:contains('"+contents_string+"')");
			if (found.length == 0) {
				$('TABLE#contents_entries').append("<tr><td>"+contents_string+"</td><td><span id='contents_del_button' class='contents_button'></span></td></tr>");
			}
			
			var text_element = $('#fabric_contents_tag_list');
			var tag_elements = $("UL#fabric_display_contents_tags LI:contains('"+contents_string+"')");
			if (tag_elements.length > 0) {
				add_remove_tag_to_field(text_element, tag_elements.first(), contents_string, "add");	
			}
			else {
				add_remove_tag_to_field(text_element, null, contents_string, "add");
			}
			return false;
		});
		
		$('#contents_del_button').live('click', function() {
			var contents_string = $(this).parent().prev().text();
			$(this).parent().parent().remove();
			//$('TABLE#contents_entries TR').remove()
			var text_element = $('#fabric_contents_tag_list');
			var tag_elements = $("UL#fabric_display_contents_tags LI:contains('"+contents_string+"')");
			if (tag_elements.length > 0) {
				add_remove_tag_to_field(text_element, tag_elements.first(), contents_string, "remove");	
			}
			else {
				add_remove_tag_to_field(text_element, null, contents_string, "remove");
			}
			return false;
		});
		
		//// ************************** ////
		//// Fabric Tags jQuery Methods ////
		//// ************************** ////

		$('input[id$=_tag_list]').bind('focus', function() {
			hide_all_tag_buttons();
			var tag_type = get_tagtype_from_id($(this).attr('id'));
			var display_id_selector = 'UL#fabric_display_'+tag_type+'_tags';
			$(display_id_selector).css("display", "block");
			$(this).trigger('blur');
			return false;
		});

		$('input[id$=_tag_list]').bind('blur', function() {
			
     		var tag_list_txt = $.trim($(this).val());
			
			// Convert comma delimited entries to array
			var tag_list_array = get_array_from_text($(this).val());
			
			// Create a selector for display tags
			var tag_type = get_tagtype_from_id($(this).attr('id'));
			var display_id_selector = 'UL#fabric_display_'+tag_type+'_tags';
			
			// Un-select all tags
			$(display_id_selector).children().removeClass("tag_selected");
			
			// Set class on selected tags
			var bInvalidValueFound = false;
			var all_tags = get_alltags(tag_type);
			for (var i = tag_list_array.length-1; i >= 0; i--) {
			//$.each(tag_list_array, function(index, value) {
				var value = tag_list_array[i];
				var result = ci_contains(value, all_tags);
				if (result != null) {
					var tag_srch_str = ":contains('"+result+"')";
					var tag_found_in = $(display_id_selector).children(tag_srch_str).addClass("tag_selected");
				}
				else
				{
					// This value is not found in the tag list.
					// New values are only accepted in 'other' Tag list.
					if (tag_type != 'other')
					{
						bInvalidValueFound = true;
						tag_list_array.splice(i, 1);
					}
				}			
			}
			
			if (bInvalidValueFound)
			{
				// replace the text value
				var tag_list_str = tag_list_array.join(", ");
				alert('Custom tags are not allowed for this field. Please use \'Other\' field to specify additional tags');
				$(this).val(tag_list_str);
			}
			return false;
		});
		
		$('UL[id^=fabric_display] LI').live("click", function() {
			// Get the tag value from the LI
			var tag_value = $(this).children('A').first().text();
			var tag_type = $(this).closest('UL').attr('id').split('_')[2];
			var tag_list_selector = '#'+'fabric_'+tag_type+'_tag_list';
			
			// Get the text field value for the tag list
			var tag_text_field = $('FORM').find(tag_list_selector);
			var tag_list = tag_text_field.val();
			var tag_list_array = get_array_from_text(tag_list);
			
			if (tag_type == 'contents') {
				// Contents are handled differently
				if ($(this).hasClass('tag_selected')) {
					$('TABLE#contents_entries').find(":contains('"+tag_value+"') + TD SPAN.contents_button").trigger('click');
				}
				else {
					$('TABLE#contents_entries').append("<tr><td>"+tag_value+"</td><td><button id='contents_del_button' class='contents_button'></button></td></tr>");
					add_remove_tag_to_field(tag_text_field, $(this), tag_value, "add");
				}
			}
			else {
				add_remove_tag_to_field(tag_text_field, $(this), tag_value, null);	
			}
			
				
			/*
			if ($(this).hasClass('tag_selected') == false)
			{
				$(this).addClass("tag_selected");
				var result = ci_contains(tag_value, tag_list_array);
				if (result == null)
				{
					tag_list_array.push(tag_value);
				}
				else
				{
					// This should never happen. Do nothing.
				}
			}
			else
			{
				$(this).removeClass("tag_selected");
				var result = ci_contains(tag_value, tag_list_array);
				if (result != null) {
					var value_index = $.inArray(result, tag_list_array);
					if (value_index > -1)
					{
						tag_list_array.splice(value_index, 1);
					}
					else
					{
						// This should never happen. Do nothing.
					}		
				}
			}
			var tag_list_str = tag_list_array.join(", ");
			tag_text_field.val(tag_list_str);
			*/
			return false;			
		});
		
		
	});
		
</script>
